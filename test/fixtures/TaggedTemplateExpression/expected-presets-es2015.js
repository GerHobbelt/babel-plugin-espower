'use strict';

var _powerAssertVisitorKeys = '{"ArrayExpression":["elements"],"AssignmentExpression":["left","right"],"BinaryExpression":["left","right"],"Directive":["value"],"DirectiveLiteral":[],"BlockStatement":["directives","body"],"BreakStatement":["label"],"CallExpression":["callee","arguments"],"CatchClause":["param","body"],"ConditionalExpression":["test","consequent","alternate"],"ContinueStatement":["label"],"DebuggerStatement":[],"DoWhileStatement":["test","body"],"EmptyStatement":[],"ExpressionStatement":["expression"],"File":["program"],"ForInStatement":["left","right","body"],"ForStatement":["init","test","update","body"],"FunctionDeclaration":["id","params","body","returnType","typeParameters"],"FunctionExpression":["id","params","body","returnType","typeParameters"],"Identifier":["typeAnnotation"],"IfStatement":["test","consequent","alternate"],"LabeledStatement":["label","body"],"StringLiteral":[],"NumericLiteral":[],"NullLiteral":[],"BooleanLiteral":[],"RegExpLiteral":[],"LogicalExpression":["left","right"],"MemberExpression":["object","property"],"NewExpression":["callee","arguments"],"Program":["directives","body"],"ObjectExpression":["properties"],"ObjectMethod":["key","params","body","decorators","returnType","typeParameters"],"ObjectProperty":["key","value","decorators"],"RestElement":["argument","typeAnnotation"],"ReturnStatement":["argument"],"SequenceExpression":["expressions"],"SwitchCase":["test","consequent"],"SwitchStatement":["discriminant","cases"],"ThisExpression":[],"ThrowStatement":["argument"],"TryStatement":["block","handler","finalizer"],"UnaryExpression":["argument"],"UpdateExpression":["argument"],"VariableDeclaration":["declarations"],"VariableDeclarator":["id","init"],"WhileStatement":["test","body"],"WithStatement":["object","body"],"AssignmentPattern":["left","right"],"ArrayPattern":["elements","typeAnnotation"],"ArrowFunctionExpression":["params","body","returnType","typeParameters"],"ClassBody":["body"],"ClassDeclaration":["id","body","superClass","mixins","typeParameters","superTypeParameters","implements","decorators"],"ClassExpression":["id","body","superClass","mixins","typeParameters","superTypeParameters","implements","decorators"],"ExportAllDeclaration":["source"],"ExportDefaultDeclaration":["declaration"],"ExportNamedDeclaration":["declaration","specifiers","source"],"ExportSpecifier":["local","exported"],"ForOfStatement":["left","right","body"],"ImportDeclaration":["specifiers","source"],"ImportDefaultSpecifier":["local"],"ImportNamespaceSpecifier":["local"],"ImportSpecifier":["local","imported"],"MetaProperty":["meta","property"],"ClassMethod":["key","params","body","decorators","returnType","typeParameters"],"ObjectPattern":["properties","typeAnnotation"],"SpreadElement":["argument"],"Super":[],"TaggedTemplateExpression":["tag","quasi"],"TemplateElement":[],"TemplateLiteral":["quasis","expressions"],"YieldExpression":["argument"],"AnyTypeAnnotation":[],"ArrayTypeAnnotation":["elementType"],"BooleanTypeAnnotation":[],"BooleanLiteralTypeAnnotation":[],"NullLiteralTypeAnnotation":[],"ClassImplements":["id","typeParameters"],"ClassProperty":["key","value","typeAnnotation","decorators"],"DeclareClass":["id","typeParameters","extends","body"],"DeclareFunction":["id"],"DeclareInterface":["id","typeParameters","extends","body"],"DeclareModule":["id","body"],"DeclareModuleExports":["typeAnnotation"],"DeclareTypeAlias":["id","typeParameters","right"],"DeclareVariable":["id"],"ExistentialTypeParam":[],"FunctionTypeAnnotation":["typeParameters","params","rest","returnType"],"FunctionTypeParam":["name","typeAnnotation"],"GenericTypeAnnotation":["id","typeParameters"],"InterfaceExtends":["id","typeParameters"],"InterfaceDeclaration":["id","typeParameters","extends","body"],"IntersectionTypeAnnotation":["types"],"MixedTypeAnnotation":[],"EmptyTypeAnnotation":[],"NullableTypeAnnotation":["typeAnnotation"],"NumericLiteralTypeAnnotation":[],"NumberTypeAnnotation":[],"StringLiteralTypeAnnotation":[],"StringTypeAnnotation":[],"ThisTypeAnnotation":[],"TupleTypeAnnotation":["types"],"TypeofTypeAnnotation":["argument"],"TypeAlias":["id","typeParameters","right"],"TypeAnnotation":["typeAnnotation"],"TypeCastExpression":["expression","typeAnnotation"],"TypeParameter":["bound"],"TypeParameterDeclaration":["params"],"TypeParameterInstantiation":["params"],"ObjectTypeAnnotation":["properties","indexers","callProperties"],"ObjectTypeCallProperty":["value"],"ObjectTypeIndexer":["id","key","value"],"ObjectTypeProperty":["key","value"],"QualifiedTypeIdentifier":["id","qualification"],"UnionTypeAnnotation":["types"],"VoidTypeAnnotation":[],"JSXAttribute":["name","value"],"JSXClosingElement":["name"],"JSXElement":["openingElement","children","closingElement"],"JSXEmptyExpression":[],"JSXExpressionContainer":["expression"],"JSXIdentifier":[],"JSXMemberExpression":["object","property"],"JSXNamespacedName":["namespace","name"],"JSXOpeningElement":["name","attributes"],"JSXSpreadAttribute":["argument"],"JSXText":[],"Noop":[],"ParenthesizedExpression":["expression"],"AwaitExpression":["argument"],"ForAwaitStatement":["left","right","body"],"BindExpression":["object","callee"],"Decorator":["expression"],"DoExpression":["body"],"ExportDefaultSpecifier":["exported"],"ExportNamespaceSpecifier":["exported"],"RestProperty":["argument"],"SpreadProperty":["argument"]}',
    _powerAssertRecorder = function () { function PowerAssertRecorder() { this.captured = []; } PowerAssertRecorder.prototype._capt = function _capt(value, espath) { this.captured.push({ value: value, espath: espath }); return value; }; PowerAssertRecorder.prototype._expr = function _expr(value, source) { return { powerAssertContext: { value: value, events: this.captured }, source: source }; }; return PowerAssertRecorder; }(),
    _rec = new _powerAssertRecorder(),
    _rec2 = new _powerAssertRecorder(),
    _rec3 = new _powerAssertRecorder();

var _templateObject = _taggedTemplateLiteral(['a', ''], ['a', '']),
    _templateObject2 = _taggedTemplateLiteral(['a', 'b', 'c', ''], ['a', 'b', 'c', '']),
    _templateObject3 = _taggedTemplateLiteral(['driver ', ', navigator ', ''], ['driver ', ', navigator ', '']);

function _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

assert(_rec._expr(_rec._capt(fn(_templateObject, 1), 'arguments/0'), {
  content: 'assert(fn`a${ 1 }`)',
  filepath: 'test/fixtures/TaggedTemplateExpression/fixture.js',
  line: 3,
  ast: '{"type":"CallExpression","callee":{"type":"Identifier","name":"assert","range":[0,6]},"arguments":[{"type":"TaggedTemplateExpression","tag":{"type":"Identifier","name":"fn","range":[7,9]},"quasi":{"type":"TemplateLiteral","quasis":[{"type":"TemplateElement","value":{"raw":"a","cooked":"a"},"tail":false,"range":[10,11]},{"type":"TemplateElement","value":{"raw":"","cooked":""},"tail":true,"range":[17,17]}],"expressions":[{"type":"NumericLiteral","value":1,"range":[14,15]}],"range":[9,18]},"range":[7,18]}],"range":[0,19]}',
  tokens: '[{"type":{"label":"name"},"value":"assert","range":[0,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"fn","range":[7,9]},{"type":{"label":"`"},"range":[9,10]},{"type":{"label":"template"},"value":"a","range":[10,11]},{"type":{"label":"${"},"range":[11,13]},{"type":{"label":"num"},"value":1,"range":[14,15]},{"type":{"label":"}"},"range":[16,17]},{"type":{"label":"template"},"value":"","range":[17,17]},{"type":{"label":"`"},"range":[17,18]},{"type":{"label":")"},"range":[18,19]}]',
  visitorKeys: _powerAssertVisitorKeys
}));

assert(_rec2._expr(_rec2._capt(fn(_templateObject2, _rec2._capt(foo, 'arguments/0/quasi/expressions/0'), _rec2._capt(bar, 'arguments/0/quasi/expressions/1'), _rec2._capt(baz, 'arguments/0/quasi/expressions/2')), 'arguments/0'), {
  content: 'assert(fn`a${ foo }b${ bar }c${ baz }`)',
  filepath: 'test/fixtures/TaggedTemplateExpression/fixture.js',
  line: 5,
  ast: '{"type":"CallExpression","callee":{"type":"Identifier","name":"assert","range":[0,6]},"arguments":[{"type":"TaggedTemplateExpression","tag":{"type":"Identifier","name":"fn","range":[7,9]},"quasi":{"type":"TemplateLiteral","quasis":[{"type":"TemplateElement","value":{"raw":"a","cooked":"a"},"tail":false,"range":[10,11]},{"type":"TemplateElement","value":{"raw":"b","cooked":"b"},"tail":false,"range":[19,20]},{"type":"TemplateElement","value":{"raw":"c","cooked":"c"},"tail":false,"range":[28,29]},{"type":"TemplateElement","value":{"raw":"","cooked":""},"tail":true,"range":[37,37]}],"expressions":[{"type":"Identifier","name":"foo","range":[14,17]},{"type":"Identifier","name":"bar","range":[23,26]},{"type":"Identifier","name":"baz","range":[32,35]}],"range":[9,38]},"range":[7,38]}],"range":[0,39]}',
  tokens: '[{"type":{"label":"name"},"value":"assert","range":[0,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"fn","range":[7,9]},{"type":{"label":"`"},"range":[9,10]},{"type":{"label":"template"},"value":"a","range":[10,11]},{"type":{"label":"${"},"range":[11,13]},{"type":{"label":"name"},"value":"foo","range":[14,17]},{"type":{"label":"}"},"range":[18,19]},{"type":{"label":"template"},"value":"b","range":[19,20]},{"type":{"label":"${"},"range":[20,22]},{"type":{"label":"name"},"value":"bar","range":[23,26]},{"type":{"label":"}"},"range":[27,28]},{"type":{"label":"template"},"value":"c","range":[28,29]},{"type":{"label":"${"},"range":[29,31]},{"type":{"label":"name"},"value":"baz","range":[32,35]},{"type":{"label":"}"},"range":[36,37]},{"type":{"label":"template"},"value":"","range":[37,37]},{"type":{"label":"`"},"range":[37,38]},{"type":{"label":")"},"range":[38,39]}]',
  visitorKeys: _powerAssertVisitorKeys
}));

assert(_rec3._expr(_rec3._capt(fn(_templateObject3, _rec3._capt(_rec3._capt(bob, 'arguments/0/quasi/expressions/0/object').name, 'arguments/0/quasi/expressions/0'), _rec3._capt(_rec3._capt(alice, 'arguments/0/quasi/expressions/1/callee/object').getName(), 'arguments/0/quasi/expressions/1')), 'arguments/0'), {
  content: 'assert(fn`driver ${ bob.name }, navigator ${ alice.getName() }`)',
  filepath: 'test/fixtures/TaggedTemplateExpression/fixture.js',
  line: 7,
  ast: '{"type":"CallExpression","callee":{"type":"Identifier","name":"assert","range":[0,6]},"arguments":[{"type":"TaggedTemplateExpression","tag":{"type":"Identifier","name":"fn","range":[7,9]},"quasi":{"type":"TemplateLiteral","quasis":[{"type":"TemplateElement","value":{"raw":"driver ","cooked":"driver "},"tail":false,"range":[10,17]},{"type":"TemplateElement","value":{"raw":", navigator ","cooked":", navigator "},"tail":false,"range":[30,42]},{"type":"TemplateElement","value":{"raw":"","cooked":""},"tail":true,"range":[62,62]}],"expressions":[{"type":"MemberExpression","object":{"type":"Identifier","name":"bob","range":[20,23]},"property":{"type":"Identifier","name":"name","range":[24,28]},"computed":false,"range":[20,28]},{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"alice","range":[45,50]},"property":{"type":"Identifier","name":"getName","range":[51,58]},"computed":false,"range":[45,58]},"arguments":[],"range":[45,60]}],"range":[9,63]},"range":[7,63]}],"range":[0,64]}',
  tokens: '[{"type":{"label":"name"},"value":"assert","range":[0,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"fn","range":[7,9]},{"type":{"label":"`"},"range":[9,10]},{"type":{"label":"template"},"value":"driver ","range":[10,17]},{"type":{"label":"${"},"range":[17,19]},{"type":{"label":"name"},"value":"bob","range":[20,23]},{"type":{"label":"."},"range":[23,24]},{"type":{"label":"name"},"value":"name","range":[24,28]},{"type":{"label":"}"},"range":[29,30]},{"type":{"label":"template"},"value":", navigator ","range":[30,42]},{"type":{"label":"${"},"range":[42,44]},{"type":{"label":"name"},"value":"alice","range":[45,50]},{"type":{"label":"."},"range":[50,51]},{"type":{"label":"name"},"value":"getName","range":[51,58]},{"type":{"label":"("},"range":[58,59]},{"type":{"label":")"},"range":[59,60]},{"type":{"label":"}"},"range":[61,62]},{"type":{"label":"template"},"value":"","range":[62,62]},{"type":{"label":"`"},"range":[62,63]},{"type":{"label":")"},"range":[63,64]}]',
  visitorKeys: _powerAssertVisitorKeys
}));
