'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _powerAssertVisitorKeys = '{"ArrayExpression":["elements"],"AssignmentExpression":["left","right"],"BinaryExpression":["left","right"],"Directive":["value"],"DirectiveLiteral":[],"BlockStatement":["directives","body"],"BreakStatement":["label"],"CallExpression":["callee","arguments"],"CatchClause":["param","body"],"ConditionalExpression":["test","consequent","alternate"],"ContinueStatement":["label"],"DebuggerStatement":[],"DoWhileStatement":["test","body"],"EmptyStatement":[],"ExpressionStatement":["expression"],"File":["program"],"ForInStatement":["left","right","body"],"ForStatement":["init","test","update","body"],"FunctionDeclaration":["id","params","body","returnType","typeParameters"],"FunctionExpression":["id","params","body","returnType","typeParameters"],"Identifier":["typeAnnotation"],"IfStatement":["test","consequent","alternate"],"LabeledStatement":["label","body"],"StringLiteral":[],"NumericLiteral":[],"NullLiteral":[],"BooleanLiteral":[],"RegExpLiteral":[],"LogicalExpression":["left","right"],"MemberExpression":["object","property"],"NewExpression":["callee","arguments"],"Program":["directives","body"],"ObjectExpression":["properties"],"ObjectMethod":["key","params","body","decorators","returnType","typeParameters"],"ObjectProperty":["key","value","decorators"],"RestElement":["argument","typeAnnotation"],"ReturnStatement":["argument"],"SequenceExpression":["expressions"],"SwitchCase":["test","consequent"],"SwitchStatement":["discriminant","cases"],"ThisExpression":[],"ThrowStatement":["argument"],"TryStatement":["block","handler","finalizer"],"UnaryExpression":["argument"],"UpdateExpression":["argument"],"VariableDeclaration":["declarations"],"VariableDeclarator":["id","init"],"WhileStatement":["test","body"],"WithStatement":["object","body"],"AssignmentPattern":["left","right"],"ArrayPattern":["elements","typeAnnotation"],"ArrowFunctionExpression":["params","body","returnType"],"ClassBody":["body"],"ClassDeclaration":["id","body","superClass","mixins","typeParameters","superTypeParameters","implements","decorators"],"ClassExpression":["id","body","superClass","mixins","typeParameters","superTypeParameters","implements","decorators"],"ExportAllDeclaration":["source"],"ExportDefaultDeclaration":["declaration"],"ExportNamedDeclaration":["declaration","specifiers","source"],"ExportSpecifier":["local","exported"],"ForOfStatement":["left","right","body"],"ImportDeclaration":["specifiers","source"],"ImportDefaultSpecifier":["local"],"ImportNamespaceSpecifier":["local"],"ImportSpecifier":["local","imported"],"MetaProperty":["meta","property"],"ClassMethod":["key","params","body","decorators","returnType","typeParameters"],"ObjectPattern":["properties","typeAnnotation"],"SpreadElement":["argument"],"Super":[],"TaggedTemplateExpression":["tag","quasi"],"TemplateElement":[],"TemplateLiteral":["quasis","expressions"],"YieldExpression":["argument"],"AnyTypeAnnotation":[],"ArrayTypeAnnotation":["elementType"],"BooleanTypeAnnotation":[],"BooleanLiteralTypeAnnotation":[],"NullLiteralTypeAnnotation":[],"ClassImplements":["id","typeParameters"],"ClassProperty":["key","value","typeAnnotation","decorators"],"DeclareClass":["id","typeParameters","extends","body"],"DeclareFunction":["id"],"DeclareInterface":["id","typeParameters","extends","body"],"DeclareModule":["id","body"],"DeclareTypeAlias":["id","typeParameters","right"],"DeclareVariable":["id"],"ExistentialTypeParam":[],"FunctionTypeAnnotation":["typeParameters","params","rest","returnType"],"FunctionTypeParam":["name","typeAnnotation"],"GenericTypeAnnotation":["id","typeParameters"],"InterfaceExtends":["id","typeParameters"],"InterfaceDeclaration":["id","typeParameters","extends","body"],"IntersectionTypeAnnotation":["types"],"MixedTypeAnnotation":[],"NullableTypeAnnotation":["typeAnnotation"],"NumericLiteralTypeAnnotation":[],"NumberTypeAnnotation":[],"StringLiteralTypeAnnotation":[],"StringTypeAnnotation":[],"ThisTypeAnnotation":[],"TupleTypeAnnotation":["types"],"TypeofTypeAnnotation":["argument"],"TypeAlias":["id","typeParameters","right"],"TypeAnnotation":["typeAnnotation"],"TypeCastExpression":["expression","typeAnnotation"],"TypeParameterDeclaration":["params"],"TypeParameterInstantiation":["params"],"ObjectTypeAnnotation":["properties","indexers","callProperties"],"ObjectTypeCallProperty":["value"],"ObjectTypeIndexer":["id","key","value"],"ObjectTypeProperty":["key","value"],"QualifiedTypeIdentifier":["id","qualification"],"UnionTypeAnnotation":["types"],"VoidTypeAnnotation":[],"JSXAttribute":["name","value"],"JSXClosingElement":["name"],"JSXElement":["openingElement","children","closingElement"],"JSXEmptyExpression":[],"JSXExpressionContainer":["expression"],"JSXIdentifier":[],"JSXMemberExpression":["object","property"],"JSXNamespacedName":["namespace","name"],"JSXOpeningElement":["name","attributes"],"JSXSpreadAttribute":["argument"],"JSXText":[],"Noop":[],"ParenthesizedExpression":["expression"],"AwaitExpression":["argument"],"BindExpression":["object","callee"],"Decorator":["expression"],"DoExpression":["body"],"ExportDefaultSpecifier":["exported"],"ExportNamespaceSpecifier":["exported"],"RestProperty":["argument"],"SpreadProperty":["argument"]}',
    _powerAssertRecorder = function () { function PowerAssertRecorder() { this.captured = []; } PowerAssertRecorder.prototype._capt = function _capt(value, espath) { this.captured.push({ value: value, espath: espath }); return value; }; PowerAssertRecorder.prototype._expr = function _expr(value, source) { return { powerAssertContext: { value: value, events: this.captured }, source: source }; }; return PowerAssertRecorder; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _powerAssert = require('power-assert');

var _powerAssert2 = _interopRequireDefault(_powerAssert);

var _enzyme = require('enzyme');

var _sinon = require('sinon');

var sinon = _interopRequireWildcard(_sinon);

var _Foo = require('../src/Foo');

var _Foo2 = _interopRequireDefault(_Foo);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ToDoItem = function (_React$Component) {
    _inherits(ToDoItem, _React$Component);

    function ToDoItem() {
        _classCallCheck(this, ToDoItem);

        return _possibleConstructorReturn(this, Object.getPrototypeOf(ToDoItem).apply(this, arguments));
    }

    _createClass(ToDoItem, [{
        key: 'render',
        value: function render() {
            var _props = this.props;
            var item = _props.item;
            var onCompleteChange = _props.onCompleteChange;

            return _react2.default.createElement(
                'div',
                { className: 'item' },
                _react2.default.createElement(
                    'span',
                    { className: 'item-mark' },
                    item.complete ? '✓' : '•'
                ),
                _react2.default.createElement(
                    'span',
                    { className: 'item-title' },
                    item.title
                ),
                _react2.default.createElement(
                    'a',
                    { className: 'item-button', onClick: function onClick() {
                            return onCompleteChange(item, !item.complete);
                        } },
                    'Mark as ',
                    item.complete ? 'Pending' : 'Complete'
                )
            );
        }
    }]);

    return ToDoItem;
}(_react2.default.Component);

function mockItem(overrides) {
    // … create mock ToDo Item
}

describe('<ToDoItem />', function () {
    it('renders the title', function () {
        var _rec = new _powerAssertRecorder();

        var item = mockItem();
        (0, _powerAssert2.default)(_rec._expr(_rec._capt(_rec._capt(_rec._capt(_rec._capt((0, _enzyme.shallow)(_react2.default.createElement(ToDoItem, { item: item })), 'arguments/0/left/callee/object/callee/object').text(), 'arguments/0/left/callee/object').indexOf(_rec._capt(_rec._capt(item, 'arguments/0/left/arguments/0/object').title, 'arguments/0/left/arguments/0')), 'arguments/0/left') !== _rec._capt(-1, 'arguments/0/right'), 'arguments/0'), {
            content: 'assert(shallow(<ToDoItem item={item} />).text().indexOf(item.title) !== -1)',
            filepath: 'test/fixtures/React/fixture.js',
            line: 29,
            ast: '{"type":"CallExpression","callee":{"type":"Identifier","name":"assert","loc":{"start":{"line":1,"column":0},"end":{"line":1,"column":6}}},"arguments":[{"type":"BinaryExpression","operator":"!==","left":{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"CallExpression","callee":{"type":"Identifier","name":"shallow","loc":{"start":{"line":1,"column":7},"end":{"line":1,"column":14}}},"arguments":[{"type":"JSXElement","openingElement":{"type":"JSXOpeningElement","name":{"type":"JSXIdentifier","name":"ToDoItem","loc":{"start":{"line":1,"column":16},"end":{"line":1,"column":24}}},"attributes":[{"type":"JSXAttribute","name":{"type":"JSXIdentifier","name":"item","loc":{"start":{"line":1,"column":25},"end":{"line":1,"column":29}}},"value":{"type":"JSXExpressionContainer","expression":{"type":"Identifier","name":"item","loc":{"start":{"line":1,"column":31},"end":{"line":1,"column":35}}},"loc":{"start":{"line":1,"column":30},"end":{"line":1,"column":36}}},"loc":{"start":{"line":1,"column":25},"end":{"line":1,"column":36}}}],"selfClosing":true,"loc":{"start":{"line":1,"column":15},"end":{"line":1,"column":39}}},"closingElement":null,"children":[],"loc":{"start":{"line":1,"column":15},"end":{"line":1,"column":39}}}],"loc":{"start":{"line":1,"column":7},"end":{"line":1,"column":40}}},"property":{"type":"Identifier","name":"text","loc":{"start":{"line":1,"column":41},"end":{"line":1,"column":45}}},"computed":false,"loc":{"start":{"line":1,"column":7},"end":{"line":1,"column":45}}},"arguments":[],"loc":{"start":{"line":1,"column":7},"end":{"line":1,"column":47}}},"property":{"type":"Identifier","name":"indexOf","loc":{"start":{"line":1,"column":48},"end":{"line":1,"column":55}}},"computed":false,"loc":{"start":{"line":1,"column":7},"end":{"line":1,"column":55}}},"arguments":[{"type":"MemberExpression","object":{"type":"Identifier","name":"item","loc":{"start":{"line":1,"column":56},"end":{"line":1,"column":60}}},"property":{"type":"Identifier","name":"title","loc":{"start":{"line":1,"column":61},"end":{"line":1,"column":66}}},"computed":false,"loc":{"start":{"line":1,"column":56},"end":{"line":1,"column":66}}}],"loc":{"start":{"line":1,"column":7},"end":{"line":1,"column":67}}},"right":{"type":"UnaryExpression","operator":"-","argument":{"type":"NumericLiteral","value":1,"loc":{"start":{"line":1,"column":73},"end":{"line":1,"column":74}}},"prefix":true,"loc":{"start":{"line":1,"column":72},"end":{"line":1,"column":74}}},"loc":{"start":{"line":1,"column":7},"end":{"line":1,"column":74}}}],"loc":{"start":{"line":1,"column":0},"end":{"line":1,"column":75}}}',
            tokens: '[{"type":{"label":"name"},"value":"assert","loc":{"start":{"line":1,"column":0},"end":{"line":1,"column":6}}},{"type":{"label":"("},"loc":{"start":{"line":1,"column":6},"end":{"line":1,"column":7}}},{"type":{"label":"name"},"value":"shallow","loc":{"start":{"line":1,"column":7},"end":{"line":1,"column":14}}},{"type":{"label":"("},"loc":{"start":{"line":1,"column":14},"end":{"line":1,"column":15}}},{"type":{"label":"jsxTagStart"},"loc":{"start":{"line":1,"column":15},"end":{"line":1,"column":16}}},{"type":{"label":"jsxName"},"value":"ToDoItem","loc":{"start":{"line":1,"column":16},"end":{"line":1,"column":24}}},{"type":{"label":"jsxName"},"value":"item","loc":{"start":{"line":1,"column":25},"end":{"line":1,"column":29}}},{"type":{"label":"="},"value":"=","loc":{"start":{"line":1,"column":29},"end":{"line":1,"column":30}}},{"type":{"label":"{"},"loc":{"start":{"line":1,"column":30},"end":{"line":1,"column":31}}},{"type":{"label":"name"},"value":"item","loc":{"start":{"line":1,"column":31},"end":{"line":1,"column":35}}},{"type":{"label":"}"},"loc":{"start":{"line":1,"column":35},"end":{"line":1,"column":36}}},{"type":{"label":"/"},"value":"/","loc":{"start":{"line":1,"column":37},"end":{"line":1,"column":38}}},{"type":{"label":"jsxTagEnd"},"loc":{"start":{"line":1,"column":38},"end":{"line":1,"column":39}}},{"type":{"label":")"},"loc":{"start":{"line":1,"column":39},"end":{"line":1,"column":40}}},{"type":{"label":"."},"loc":{"start":{"line":1,"column":40},"end":{"line":1,"column":41}}},{"type":{"label":"name"},"value":"text","loc":{"start":{"line":1,"column":41},"end":{"line":1,"column":45}}},{"type":{"label":"("},"loc":{"start":{"line":1,"column":45},"end":{"line":1,"column":46}}},{"type":{"label":")"},"loc":{"start":{"line":1,"column":46},"end":{"line":1,"column":47}}},{"type":{"label":"."},"loc":{"start":{"line":1,"column":47},"end":{"line":1,"column":48}}},{"type":{"label":"name"},"value":"indexOf","loc":{"start":{"line":1,"column":48},"end":{"line":1,"column":55}}},{"type":{"label":"("},"loc":{"start":{"line":1,"column":55},"end":{"line":1,"column":56}}},{"type":{"label":"name"},"value":"item","loc":{"start":{"line":1,"column":56},"end":{"line":1,"column":60}}},{"type":{"label":"."},"loc":{"start":{"line":1,"column":60},"end":{"line":1,"column":61}}},{"type":{"label":"name"},"value":"title","loc":{"start":{"line":1,"column":61},"end":{"line":1,"column":66}}},{"type":{"label":")"},"loc":{"start":{"line":1,"column":66},"end":{"line":1,"column":67}}},{"type":{"label":"==/!="},"value":"!==","loc":{"start":{"line":1,"column":68},"end":{"line":1,"column":71}}},{"type":{"label":"+/-"},"value":"-","loc":{"start":{"line":1,"column":72},"end":{"line":1,"column":73}}},{"type":{"label":"num"},"value":1,"loc":{"start":{"line":1,"column":73},"end":{"line":1,"column":74}}},{"type":{"label":")"},"loc":{"start":{"line":1,"column":74},"end":{"line":1,"column":75}}}]',
            visitorKeys: _powerAssertVisitorKeys
        }));
    });
    it('renders a check mark when complete', function () {
        var _rec2 = new _powerAssertRecorder();

        var item = mockItem({ complete: true });
        (0, _powerAssert2.default)(_rec2._expr(_rec2._capt(_rec2._capt(_rec2._capt(_rec2._capt((0, _enzyme.shallow)(_react2.default.createElement(ToDoItem, { item: item })), 'arguments/0/left/callee/object/callee/object').find('.item-mark'), 'arguments/0/left/callee/object').text(), 'arguments/0/left') === '✓', 'arguments/0'), {
            content: 'assert(shallow(<ToDoItem item={item} />).find(\'.item-mark\').text() === \'✓\')',
            filepath: 'test/fixtures/React/fixture.js',
            line: 33,
            ast: '{"type":"CallExpression","callee":{"type":"Identifier","name":"assert","loc":{"start":{"line":1,"column":0},"end":{"line":1,"column":6}}},"arguments":[{"type":"BinaryExpression","operator":"===","left":{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"CallExpression","callee":{"type":"Identifier","name":"shallow","loc":{"start":{"line":1,"column":7},"end":{"line":1,"column":14}}},"arguments":[{"type":"JSXElement","openingElement":{"type":"JSXOpeningElement","name":{"type":"JSXIdentifier","name":"ToDoItem","loc":{"start":{"line":1,"column":16},"end":{"line":1,"column":24}}},"attributes":[{"type":"JSXAttribute","name":{"type":"JSXIdentifier","name":"item","loc":{"start":{"line":1,"column":25},"end":{"line":1,"column":29}}},"value":{"type":"JSXExpressionContainer","expression":{"type":"Identifier","name":"item","loc":{"start":{"line":1,"column":31},"end":{"line":1,"column":35}}},"loc":{"start":{"line":1,"column":30},"end":{"line":1,"column":36}}},"loc":{"start":{"line":1,"column":25},"end":{"line":1,"column":36}}}],"selfClosing":true,"loc":{"start":{"line":1,"column":15},"end":{"line":1,"column":39}}},"closingElement":null,"children":[],"loc":{"start":{"line":1,"column":15},"end":{"line":1,"column":39}}}],"loc":{"start":{"line":1,"column":7},"end":{"line":1,"column":40}}},"property":{"type":"Identifier","name":"find","loc":{"start":{"line":1,"column":41},"end":{"line":1,"column":45}}},"computed":false,"loc":{"start":{"line":1,"column":7},"end":{"line":1,"column":45}}},"arguments":[{"type":"StringLiteral","value":".item-mark","loc":{"start":{"line":1,"column":46},"end":{"line":1,"column":58}}}],"loc":{"start":{"line":1,"column":7},"end":{"line":1,"column":59}}},"property":{"type":"Identifier","name":"text","loc":{"start":{"line":1,"column":60},"end":{"line":1,"column":64}}},"computed":false,"loc":{"start":{"line":1,"column":7},"end":{"line":1,"column":64}}},"arguments":[],"loc":{"start":{"line":1,"column":7},"end":{"line":1,"column":66}}},"right":{"type":"StringLiteral","value":"✓","loc":{"start":{"line":1,"column":71},"end":{"line":1,"column":74}}},"loc":{"start":{"line":1,"column":7},"end":{"line":1,"column":74}}}],"loc":{"start":{"line":1,"column":0},"end":{"line":1,"column":75}}}',
            tokens: '[{"type":{"label":"name"},"value":"assert","loc":{"start":{"line":1,"column":0},"end":{"line":1,"column":6}}},{"type":{"label":"("},"loc":{"start":{"line":1,"column":6},"end":{"line":1,"column":7}}},{"type":{"label":"name"},"value":"shallow","loc":{"start":{"line":1,"column":7},"end":{"line":1,"column":14}}},{"type":{"label":"("},"loc":{"start":{"line":1,"column":14},"end":{"line":1,"column":15}}},{"type":{"label":"jsxTagStart"},"loc":{"start":{"line":1,"column":15},"end":{"line":1,"column":16}}},{"type":{"label":"jsxName"},"value":"ToDoItem","loc":{"start":{"line":1,"column":16},"end":{"line":1,"column":24}}},{"type":{"label":"jsxName"},"value":"item","loc":{"start":{"line":1,"column":25},"end":{"line":1,"column":29}}},{"type":{"label":"="},"value":"=","loc":{"start":{"line":1,"column":29},"end":{"line":1,"column":30}}},{"type":{"label":"{"},"loc":{"start":{"line":1,"column":30},"end":{"line":1,"column":31}}},{"type":{"label":"name"},"value":"item","loc":{"start":{"line":1,"column":31},"end":{"line":1,"column":35}}},{"type":{"label":"}"},"loc":{"start":{"line":1,"column":35},"end":{"line":1,"column":36}}},{"type":{"label":"/"},"value":"/","loc":{"start":{"line":1,"column":37},"end":{"line":1,"column":38}}},{"type":{"label":"jsxTagEnd"},"loc":{"start":{"line":1,"column":38},"end":{"line":1,"column":39}}},{"type":{"label":")"},"loc":{"start":{"line":1,"column":39},"end":{"line":1,"column":40}}},{"type":{"label":"."},"loc":{"start":{"line":1,"column":40},"end":{"line":1,"column":41}}},{"type":{"label":"name"},"value":"find","loc":{"start":{"line":1,"column":41},"end":{"line":1,"column":45}}},{"type":{"label":"("},"loc":{"start":{"line":1,"column":45},"end":{"line":1,"column":46}}},{"type":{"label":"string"},"value":".item-mark","loc":{"start":{"line":1,"column":46},"end":{"line":1,"column":58}}},{"type":{"label":")"},"loc":{"start":{"line":1,"column":58},"end":{"line":1,"column":59}}},{"type":{"label":"."},"loc":{"start":{"line":1,"column":59},"end":{"line":1,"column":60}}},{"type":{"label":"name"},"value":"text","loc":{"start":{"line":1,"column":60},"end":{"line":1,"column":64}}},{"type":{"label":"("},"loc":{"start":{"line":1,"column":64},"end":{"line":1,"column":65}}},{"type":{"label":")"},"loc":{"start":{"line":1,"column":65},"end":{"line":1,"column":66}}},{"type":{"label":"==/!="},"value":"===","loc":{"start":{"line":1,"column":67},"end":{"line":1,"column":70}}},{"type":{"label":"string"},"value":"✓","loc":{"start":{"line":1,"column":71},"end":{"line":1,"column":74}}},{"type":{"label":")"},"loc":{"start":{"line":1,"column":74},"end":{"line":1,"column":75}}}]',
            visitorKeys: _powerAssertVisitorKeys
        }));
    });
    it('renders a bullet when not complete', function () {
        var _rec3 = new _powerAssertRecorder();

        var item = mockItem({ complete: false });
        (0, _powerAssert2.default)(_rec3._expr(_rec3._capt(_rec3._capt(_rec3._capt(_rec3._capt((0, _enzyme.shallow)(_react2.default.createElement(ToDoItem, { item: item })), 'arguments/0/left/callee/object/callee/object').find('.item-mark'), 'arguments/0/left/callee/object').text(), 'arguments/0/left') === '•', 'arguments/0'), {
            content: 'assert(shallow(<ToDoItem item={item} />).find(\'.item-mark\').text() === \'•\')',
            filepath: 'test/fixtures/React/fixture.js',
            line: 37,
            ast: '{"type":"CallExpression","callee":{"type":"Identifier","name":"assert","loc":{"start":{"line":1,"column":0},"end":{"line":1,"column":6}}},"arguments":[{"type":"BinaryExpression","operator":"===","left":{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"CallExpression","callee":{"type":"Identifier","name":"shallow","loc":{"start":{"line":1,"column":7},"end":{"line":1,"column":14}}},"arguments":[{"type":"JSXElement","openingElement":{"type":"JSXOpeningElement","name":{"type":"JSXIdentifier","name":"ToDoItem","loc":{"start":{"line":1,"column":16},"end":{"line":1,"column":24}}},"attributes":[{"type":"JSXAttribute","name":{"type":"JSXIdentifier","name":"item","loc":{"start":{"line":1,"column":25},"end":{"line":1,"column":29}}},"value":{"type":"JSXExpressionContainer","expression":{"type":"Identifier","name":"item","loc":{"start":{"line":1,"column":31},"end":{"line":1,"column":35}}},"loc":{"start":{"line":1,"column":30},"end":{"line":1,"column":36}}},"loc":{"start":{"line":1,"column":25},"end":{"line":1,"column":36}}}],"selfClosing":true,"loc":{"start":{"line":1,"column":15},"end":{"line":1,"column":39}}},"closingElement":null,"children":[],"loc":{"start":{"line":1,"column":15},"end":{"line":1,"column":39}}}],"loc":{"start":{"line":1,"column":7},"end":{"line":1,"column":40}}},"property":{"type":"Identifier","name":"find","loc":{"start":{"line":1,"column":41},"end":{"line":1,"column":45}}},"computed":false,"loc":{"start":{"line":1,"column":7},"end":{"line":1,"column":45}}},"arguments":[{"type":"StringLiteral","value":".item-mark","loc":{"start":{"line":1,"column":46},"end":{"line":1,"column":58}}}],"loc":{"start":{"line":1,"column":7},"end":{"line":1,"column":59}}},"property":{"type":"Identifier","name":"text","loc":{"start":{"line":1,"column":60},"end":{"line":1,"column":64}}},"computed":false,"loc":{"start":{"line":1,"column":7},"end":{"line":1,"column":64}}},"arguments":[],"loc":{"start":{"line":1,"column":7},"end":{"line":1,"column":66}}},"right":{"type":"StringLiteral","value":"•","loc":{"start":{"line":1,"column":71},"end":{"line":1,"column":74}}},"loc":{"start":{"line":1,"column":7},"end":{"line":1,"column":74}}}],"loc":{"start":{"line":1,"column":0},"end":{"line":1,"column":75}}}',
            tokens: '[{"type":{"label":"name"},"value":"assert","loc":{"start":{"line":1,"column":0},"end":{"line":1,"column":6}}},{"type":{"label":"("},"loc":{"start":{"line":1,"column":6},"end":{"line":1,"column":7}}},{"type":{"label":"name"},"value":"shallow","loc":{"start":{"line":1,"column":7},"end":{"line":1,"column":14}}},{"type":{"label":"("},"loc":{"start":{"line":1,"column":14},"end":{"line":1,"column":15}}},{"type":{"label":"jsxTagStart"},"loc":{"start":{"line":1,"column":15},"end":{"line":1,"column":16}}},{"type":{"label":"jsxName"},"value":"ToDoItem","loc":{"start":{"line":1,"column":16},"end":{"line":1,"column":24}}},{"type":{"label":"jsxName"},"value":"item","loc":{"start":{"line":1,"column":25},"end":{"line":1,"column":29}}},{"type":{"label":"="},"value":"=","loc":{"start":{"line":1,"column":29},"end":{"line":1,"column":30}}},{"type":{"label":"{"},"loc":{"start":{"line":1,"column":30},"end":{"line":1,"column":31}}},{"type":{"label":"name"},"value":"item","loc":{"start":{"line":1,"column":31},"end":{"line":1,"column":35}}},{"type":{"label":"}"},"loc":{"start":{"line":1,"column":35},"end":{"line":1,"column":36}}},{"type":{"label":"/"},"value":"/","loc":{"start":{"line":1,"column":37},"end":{"line":1,"column":38}}},{"type":{"label":"jsxTagEnd"},"loc":{"start":{"line":1,"column":38},"end":{"line":1,"column":39}}},{"type":{"label":")"},"loc":{"start":{"line":1,"column":39},"end":{"line":1,"column":40}}},{"type":{"label":"."},"loc":{"start":{"line":1,"column":40},"end":{"line":1,"column":41}}},{"type":{"label":"name"},"value":"find","loc":{"start":{"line":1,"column":41},"end":{"line":1,"column":45}}},{"type":{"label":"("},"loc":{"start":{"line":1,"column":45},"end":{"line":1,"column":46}}},{"type":{"label":"string"},"value":".item-mark","loc":{"start":{"line":1,"column":46},"end":{"line":1,"column":58}}},{"type":{"label":")"},"loc":{"start":{"line":1,"column":58},"end":{"line":1,"column":59}}},{"type":{"label":"."},"loc":{"start":{"line":1,"column":59},"end":{"line":1,"column":60}}},{"type":{"label":"name"},"value":"text","loc":{"start":{"line":1,"column":60},"end":{"line":1,"column":64}}},{"type":{"label":"("},"loc":{"start":{"line":1,"column":64},"end":{"line":1,"column":65}}},{"type":{"label":")"},"loc":{"start":{"line":1,"column":65},"end":{"line":1,"column":66}}},{"type":{"label":"==/!="},"value":"===","loc":{"start":{"line":1,"column":67},"end":{"line":1,"column":70}}},{"type":{"label":"string"},"value":"•","loc":{"start":{"line":1,"column":71},"end":{"line":1,"column":74}}},{"type":{"label":")"},"loc":{"start":{"line":1,"column":74},"end":{"line":1,"column":75}}}]',
            visitorKeys: _powerAssertVisitorKeys
        }));
    });
    it('calls onCompleteChange handler with the right arguments when clicked', function () {
        var _rec4 = new _powerAssertRecorder(),
            _rec5 = new _powerAssertRecorder();

        var spy = sinon.spy();
        var item = mockItem();
        var wrapper = (0, _enzyme.shallow)(_react2.default.createElement(ToDoItem, { item: item, onCompleteChange: spy }));
        wrapper.find('.item-button').simulate('click');
        (0, _powerAssert2.default)(_rec4._expr(_rec4._capt(_rec4._capt(_rec4._capt(spy, 'arguments/0/left/object').calledOnce, 'arguments/0/left') === true, 'arguments/0'), {
            content: 'assert(spy.calledOnce === true)',
            filepath: 'test/fixtures/React/fixture.js',
            line: 44,
            ast: '{"type":"CallExpression","callee":{"type":"Identifier","name":"assert","loc":{"start":{"line":1,"column":0},"end":{"line":1,"column":6}}},"arguments":[{"type":"BinaryExpression","operator":"===","left":{"type":"MemberExpression","object":{"type":"Identifier","name":"spy","loc":{"start":{"line":1,"column":7},"end":{"line":1,"column":10}}},"property":{"type":"Identifier","name":"calledOnce","loc":{"start":{"line":1,"column":11},"end":{"line":1,"column":21}}},"computed":false,"loc":{"start":{"line":1,"column":7},"end":{"line":1,"column":21}}},"right":{"type":"BooleanLiteral","value":true,"loc":{"start":{"line":1,"column":26},"end":{"line":1,"column":30}}},"loc":{"start":{"line":1,"column":7},"end":{"line":1,"column":30}}}],"loc":{"start":{"line":1,"column":0},"end":{"line":1,"column":31}}}',
            tokens: '[{"type":{"label":"name"},"value":"assert","loc":{"start":{"line":1,"column":0},"end":{"line":1,"column":6}}},{"type":{"label":"("},"loc":{"start":{"line":1,"column":6},"end":{"line":1,"column":7}}},{"type":{"label":"name"},"value":"spy","loc":{"start":{"line":1,"column":7},"end":{"line":1,"column":10}}},{"type":{"label":"."},"loc":{"start":{"line":1,"column":10},"end":{"line":1,"column":11}}},{"type":{"label":"name"},"value":"calledOnce","loc":{"start":{"line":1,"column":11},"end":{"line":1,"column":21}}},{"type":{"label":"==/!="},"value":"===","loc":{"start":{"line":1,"column":22},"end":{"line":1,"column":25}}},{"type":{"label":"true"},"value":"true","loc":{"start":{"line":1,"column":26},"end":{"line":1,"column":30}}},{"type":{"label":")"},"loc":{"start":{"line":1,"column":30},"end":{"line":1,"column":31}}}]',
            visitorKeys: _powerAssertVisitorKeys
        }));
        (0, _powerAssert2.default)(_rec5._expr(_rec5._capt(_rec5._capt(_rec5._capt(spy, 'arguments/0/left/callee/object').calledWith(_rec5._capt(item, 'arguments/0/left/arguments/0'), false), 'arguments/0/left') === true, 'arguments/0'), {
            content: 'assert(spy.calledWith(item, false) === true)',
            filepath: 'test/fixtures/React/fixture.js',
            line: 45,
            ast: '{"type":"CallExpression","callee":{"type":"Identifier","name":"assert","loc":{"start":{"line":1,"column":0},"end":{"line":1,"column":6}}},"arguments":[{"type":"BinaryExpression","operator":"===","left":{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"spy","loc":{"start":{"line":1,"column":7},"end":{"line":1,"column":10}}},"property":{"type":"Identifier","name":"calledWith","loc":{"start":{"line":1,"column":11},"end":{"line":1,"column":21}}},"computed":false,"loc":{"start":{"line":1,"column":7},"end":{"line":1,"column":21}}},"arguments":[{"type":"Identifier","name":"item","loc":{"start":{"line":1,"column":22},"end":{"line":1,"column":26}}},{"type":"BooleanLiteral","value":false,"loc":{"start":{"line":1,"column":28},"end":{"line":1,"column":33}}}],"loc":{"start":{"line":1,"column":7},"end":{"line":1,"column":34}}},"right":{"type":"BooleanLiteral","value":true,"loc":{"start":{"line":1,"column":39},"end":{"line":1,"column":43}}},"loc":{"start":{"line":1,"column":7},"end":{"line":1,"column":43}}}],"loc":{"start":{"line":1,"column":0},"end":{"line":1,"column":44}}}',
            tokens: '[{"type":{"label":"name"},"value":"assert","loc":{"start":{"line":1,"column":0},"end":{"line":1,"column":6}}},{"type":{"label":"("},"loc":{"start":{"line":1,"column":6},"end":{"line":1,"column":7}}},{"type":{"label":"name"},"value":"spy","loc":{"start":{"line":1,"column":7},"end":{"line":1,"column":10}}},{"type":{"label":"."},"loc":{"start":{"line":1,"column":10},"end":{"line":1,"column":11}}},{"type":{"label":"name"},"value":"calledWith","loc":{"start":{"line":1,"column":11},"end":{"line":1,"column":21}}},{"type":{"label":"("},"loc":{"start":{"line":1,"column":21},"end":{"line":1,"column":22}}},{"type":{"label":"name"},"value":"item","loc":{"start":{"line":1,"column":22},"end":{"line":1,"column":26}}},{"type":{"label":","},"loc":{"start":{"line":1,"column":26},"end":{"line":1,"column":27}}},{"type":{"label":"false"},"value":"false","loc":{"start":{"line":1,"column":28},"end":{"line":1,"column":33}}},{"type":{"label":")"},"loc":{"start":{"line":1,"column":33},"end":{"line":1,"column":34}}},{"type":{"label":"==/!="},"value":"===","loc":{"start":{"line":1,"column":35},"end":{"line":1,"column":38}}},{"type":{"label":"true"},"value":"true","loc":{"start":{"line":1,"column":39},"end":{"line":1,"column":43}}},{"type":{"label":")"},"loc":{"start":{"line":1,"column":43},"end":{"line":1,"column":44}}}]',
            visitorKeys: _powerAssertVisitorKeys
        }));
    });
});

describe('<Foo />', function () {
    describe('#shallow', function () {
        it('#contains', function () {
            var _rec6 = new _powerAssertRecorder();

            (0, _powerAssert2.default)(_rec6._expr(_rec6._capt(_rec6._capt((0, _enzyme.shallow)(_react2.default.createElement(_Foo2.default, null)), 'arguments/0/callee/object').contains(_react2.default.createElement('div', { className: 'foo' })), 'arguments/0'), {
                content: 'assert(shallow(<Foo />).contains(<div className="foo" />))',
                filepath: 'test/fixtures/React/fixture.js',
                line: 52,
                ast: '{"type":"CallExpression","callee":{"type":"Identifier","name":"assert","loc":{"start":{"line":1,"column":0},"end":{"line":1,"column":6}}},"arguments":[{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"CallExpression","callee":{"type":"Identifier","name":"shallow","loc":{"start":{"line":1,"column":7},"end":{"line":1,"column":14}}},"arguments":[{"type":"JSXElement","openingElement":{"type":"JSXOpeningElement","name":{"type":"JSXIdentifier","name":"Foo","loc":{"start":{"line":1,"column":16},"end":{"line":1,"column":19}}},"attributes":[],"selfClosing":true,"loc":{"start":{"line":1,"column":15},"end":{"line":1,"column":22}}},"closingElement":null,"children":[],"loc":{"start":{"line":1,"column":15},"end":{"line":1,"column":22}}}],"loc":{"start":{"line":1,"column":7},"end":{"line":1,"column":23}}},"property":{"type":"Identifier","name":"contains","loc":{"start":{"line":1,"column":24},"end":{"line":1,"column":32}}},"computed":false,"loc":{"start":{"line":1,"column":7},"end":{"line":1,"column":32}}},"arguments":[{"type":"JSXElement","openingElement":{"type":"JSXOpeningElement","name":{"type":"JSXIdentifier","name":"div","loc":{"start":{"line":1,"column":34},"end":{"line":1,"column":37}}},"attributes":[{"type":"JSXAttribute","name":{"type":"JSXIdentifier","name":"className","loc":{"start":{"line":1,"column":38},"end":{"line":1,"column":47}}},"value":{"type":"StringLiteral","value":"foo","loc":{"start":{"line":1,"column":48},"end":{"line":1,"column":53}}},"loc":{"start":{"line":1,"column":38},"end":{"line":1,"column":53}}}],"selfClosing":true,"loc":{"start":{"line":1,"column":33},"end":{"line":1,"column":56}}},"closingElement":null,"children":[],"loc":{"start":{"line":1,"column":33},"end":{"line":1,"column":56}}}],"loc":{"start":{"line":1,"column":7},"end":{"line":1,"column":57}}}],"loc":{"start":{"line":1,"column":0},"end":{"line":1,"column":58}}}',
                tokens: '[{"type":{"label":"name"},"value":"assert","loc":{"start":{"line":1,"column":0},"end":{"line":1,"column":6}}},{"type":{"label":"("},"loc":{"start":{"line":1,"column":6},"end":{"line":1,"column":7}}},{"type":{"label":"name"},"value":"shallow","loc":{"start":{"line":1,"column":7},"end":{"line":1,"column":14}}},{"type":{"label":"("},"loc":{"start":{"line":1,"column":14},"end":{"line":1,"column":15}}},{"type":{"label":"jsxTagStart"},"loc":{"start":{"line":1,"column":15},"end":{"line":1,"column":16}}},{"type":{"label":"jsxName"},"value":"Foo","loc":{"start":{"line":1,"column":16},"end":{"line":1,"column":19}}},{"type":{"label":"/"},"value":"/","loc":{"start":{"line":1,"column":20},"end":{"line":1,"column":21}}},{"type":{"label":"jsxTagEnd"},"loc":{"start":{"line":1,"column":21},"end":{"line":1,"column":22}}},{"type":{"label":")"},"loc":{"start":{"line":1,"column":22},"end":{"line":1,"column":23}}},{"type":{"label":"."},"loc":{"start":{"line":1,"column":23},"end":{"line":1,"column":24}}},{"type":{"label":"name"},"value":"contains","loc":{"start":{"line":1,"column":24},"end":{"line":1,"column":32}}},{"type":{"label":"("},"loc":{"start":{"line":1,"column":32},"end":{"line":1,"column":33}}},{"type":{"label":"jsxTagStart"},"loc":{"start":{"line":1,"column":33},"end":{"line":1,"column":34}}},{"type":{"label":"jsxName"},"value":"div","loc":{"start":{"line":1,"column":34},"end":{"line":1,"column":37}}},{"type":{"label":"jsxName"},"value":"className","loc":{"start":{"line":1,"column":38},"end":{"line":1,"column":47}}},{"type":{"label":"="},"value":"=","loc":{"start":{"line":1,"column":47},"end":{"line":1,"column":48}}},{"type":{"label":"string"},"value":"foo","loc":{"start":{"line":1,"column":48},"end":{"line":1,"column":53}}},{"type":{"label":"/"},"value":"/","loc":{"start":{"line":1,"column":54},"end":{"line":1,"column":55}}},{"type":{"label":"jsxTagEnd"},"loc":{"start":{"line":1,"column":55},"end":{"line":1,"column":56}}},{"type":{"label":")"},"loc":{"start":{"line":1,"column":56},"end":{"line":1,"column":57}}},{"type":{"label":")"},"loc":{"start":{"line":1,"column":57},"end":{"line":1,"column":58}}}]',
                visitorKeys: _powerAssertVisitorKeys
            }));
        });
        it('#is', function () {
            var _rec7 = new _powerAssertRecorder();

            (0, _powerAssert2.default)(_rec7._expr(_rec7._capt(_rec7._capt((0, _enzyme.shallow)(_react2.default.createElement(_Foo2.default, null)), 'arguments/0/callee/object').is('.foo'), 'arguments/0'), {
                content: 'assert(shallow(<Foo />).is(\'.foo\'))',
                filepath: 'test/fixtures/React/fixture.js',
                line: 55,
                ast: '{"type":"CallExpression","callee":{"type":"Identifier","name":"assert","loc":{"start":{"line":1,"column":0},"end":{"line":1,"column":6}}},"arguments":[{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"CallExpression","callee":{"type":"Identifier","name":"shallow","loc":{"start":{"line":1,"column":7},"end":{"line":1,"column":14}}},"arguments":[{"type":"JSXElement","openingElement":{"type":"JSXOpeningElement","name":{"type":"JSXIdentifier","name":"Foo","loc":{"start":{"line":1,"column":16},"end":{"line":1,"column":19}}},"attributes":[],"selfClosing":true,"loc":{"start":{"line":1,"column":15},"end":{"line":1,"column":22}}},"closingElement":null,"children":[],"loc":{"start":{"line":1,"column":15},"end":{"line":1,"column":22}}}],"loc":{"start":{"line":1,"column":7},"end":{"line":1,"column":23}}},"property":{"type":"Identifier","name":"is","loc":{"start":{"line":1,"column":24},"end":{"line":1,"column":26}}},"computed":false,"loc":{"start":{"line":1,"column":7},"end":{"line":1,"column":26}}},"arguments":[{"type":"StringLiteral","value":".foo","loc":{"start":{"line":1,"column":27},"end":{"line":1,"column":33}}}],"loc":{"start":{"line":1,"column":7},"end":{"line":1,"column":34}}}],"loc":{"start":{"line":1,"column":0},"end":{"line":1,"column":35}}}',
                tokens: '[{"type":{"label":"name"},"value":"assert","loc":{"start":{"line":1,"column":0},"end":{"line":1,"column":6}}},{"type":{"label":"("},"loc":{"start":{"line":1,"column":6},"end":{"line":1,"column":7}}},{"type":{"label":"name"},"value":"shallow","loc":{"start":{"line":1,"column":7},"end":{"line":1,"column":14}}},{"type":{"label":"("},"loc":{"start":{"line":1,"column":14},"end":{"line":1,"column":15}}},{"type":{"label":"jsxTagStart"},"loc":{"start":{"line":1,"column":15},"end":{"line":1,"column":16}}},{"type":{"label":"jsxName"},"value":"Foo","loc":{"start":{"line":1,"column":16},"end":{"line":1,"column":19}}},{"type":{"label":"/"},"value":"/","loc":{"start":{"line":1,"column":20},"end":{"line":1,"column":21}}},{"type":{"label":"jsxTagEnd"},"loc":{"start":{"line":1,"column":21},"end":{"line":1,"column":22}}},{"type":{"label":")"},"loc":{"start":{"line":1,"column":22},"end":{"line":1,"column":23}}},{"type":{"label":"."},"loc":{"start":{"line":1,"column":23},"end":{"line":1,"column":24}}},{"type":{"label":"name"},"value":"is","loc":{"start":{"line":1,"column":24},"end":{"line":1,"column":26}}},{"type":{"label":"("},"loc":{"start":{"line":1,"column":26},"end":{"line":1,"column":27}}},{"type":{"label":"string"},"value":".foo","loc":{"start":{"line":1,"column":27},"end":{"line":1,"column":33}}},{"type":{"label":")"},"loc":{"start":{"line":1,"column":33},"end":{"line":1,"column":34}}},{"type":{"label":")"},"loc":{"start":{"line":1,"column":34},"end":{"line":1,"column":35}}}]',
                visitorKeys: _powerAssertVisitorKeys
            }));
        });
    });
    describe('#mount', function () {
        it('#find', function () {
            var _rec8 = new _powerAssertRecorder();

            (0, _powerAssert2.default)(_rec8._expr(_rec8._capt(_rec8._capt(_rec8._capt(_rec8._capt((0, _enzyme.mount)(_react2.default.createElement(_Foo2.default, null)), 'arguments/0/left/object/callee/object').find('.foo'), 'arguments/0/left/object').length, 'arguments/0/left') === 1, 'arguments/0'), {
                content: 'assert(mount(<Foo />).find(\'.foo\').length === 1)',
                filepath: 'test/fixtures/React/fixture.js',
                line: 60,
                ast: '{"type":"CallExpression","callee":{"type":"Identifier","name":"assert","loc":{"start":{"line":1,"column":0},"end":{"line":1,"column":6}}},"arguments":[{"type":"BinaryExpression","operator":"===","left":{"type":"MemberExpression","object":{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"CallExpression","callee":{"type":"Identifier","name":"mount","loc":{"start":{"line":1,"column":7},"end":{"line":1,"column":12}}},"arguments":[{"type":"JSXElement","openingElement":{"type":"JSXOpeningElement","name":{"type":"JSXIdentifier","name":"Foo","loc":{"start":{"line":1,"column":14},"end":{"line":1,"column":17}}},"attributes":[],"selfClosing":true,"loc":{"start":{"line":1,"column":13},"end":{"line":1,"column":20}}},"closingElement":null,"children":[],"loc":{"start":{"line":1,"column":13},"end":{"line":1,"column":20}}}],"loc":{"start":{"line":1,"column":7},"end":{"line":1,"column":21}}},"property":{"type":"Identifier","name":"find","loc":{"start":{"line":1,"column":22},"end":{"line":1,"column":26}}},"computed":false,"loc":{"start":{"line":1,"column":7},"end":{"line":1,"column":26}}},"arguments":[{"type":"StringLiteral","value":".foo","loc":{"start":{"line":1,"column":27},"end":{"line":1,"column":33}}}],"loc":{"start":{"line":1,"column":7},"end":{"line":1,"column":34}}},"property":{"type":"Identifier","name":"length","loc":{"start":{"line":1,"column":35},"end":{"line":1,"column":41}}},"computed":false,"loc":{"start":{"line":1,"column":7},"end":{"line":1,"column":41}}},"right":{"type":"NumericLiteral","value":1,"loc":{"start":{"line":1,"column":46},"end":{"line":1,"column":47}}},"loc":{"start":{"line":1,"column":7},"end":{"line":1,"column":47}}}],"loc":{"start":{"line":1,"column":0},"end":{"line":1,"column":48}}}',
                tokens: '[{"type":{"label":"name"},"value":"assert","loc":{"start":{"line":1,"column":0},"end":{"line":1,"column":6}}},{"type":{"label":"("},"loc":{"start":{"line":1,"column":6},"end":{"line":1,"column":7}}},{"type":{"label":"name"},"value":"mount","loc":{"start":{"line":1,"column":7},"end":{"line":1,"column":12}}},{"type":{"label":"("},"loc":{"start":{"line":1,"column":12},"end":{"line":1,"column":13}}},{"type":{"label":"jsxTagStart"},"loc":{"start":{"line":1,"column":13},"end":{"line":1,"column":14}}},{"type":{"label":"jsxName"},"value":"Foo","loc":{"start":{"line":1,"column":14},"end":{"line":1,"column":17}}},{"type":{"label":"/"},"value":"/","loc":{"start":{"line":1,"column":18},"end":{"line":1,"column":19}}},{"type":{"label":"jsxTagEnd"},"loc":{"start":{"line":1,"column":19},"end":{"line":1,"column":20}}},{"type":{"label":")"},"loc":{"start":{"line":1,"column":20},"end":{"line":1,"column":21}}},{"type":{"label":"."},"loc":{"start":{"line":1,"column":21},"end":{"line":1,"column":22}}},{"type":{"label":"name"},"value":"find","loc":{"start":{"line":1,"column":22},"end":{"line":1,"column":26}}},{"type":{"label":"("},"loc":{"start":{"line":1,"column":26},"end":{"line":1,"column":27}}},{"type":{"label":"string"},"value":".foo","loc":{"start":{"line":1,"column":27},"end":{"line":1,"column":33}}},{"type":{"label":")"},"loc":{"start":{"line":1,"column":33},"end":{"line":1,"column":34}}},{"type":{"label":"."},"loc":{"start":{"line":1,"column":34},"end":{"line":1,"column":35}}},{"type":{"label":"name"},"value":"length","loc":{"start":{"line":1,"column":35},"end":{"line":1,"column":41}}},{"type":{"label":"==/!="},"value":"===","loc":{"start":{"line":1,"column":42},"end":{"line":1,"column":45}}},{"type":{"label":"num"},"value":1,"loc":{"start":{"line":1,"column":46},"end":{"line":1,"column":47}}},{"type":{"label":")"},"loc":{"start":{"line":1,"column":47},"end":{"line":1,"column":48}}}]',
                visitorKeys: _powerAssertVisitorKeys
            }));
        });
    });
});
